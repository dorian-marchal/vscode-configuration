{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"console.log": {
		"scope": "javascript,javascriptreact",
		"prefix": "cl",
		"body": [
			"console.log(${1});"
		]
	},
	"describe": {
		"scope": "javascript,javascriptreact",
		"prefix": "desc",
		"body": [
			"describe('${1:...}', ${2}() => {",
			"  ${3}",
			"});",
		]
	},
	"it": {
		"scope": "javascript,javascriptreact",
		"prefix": "it",
		"body": [
			"it('${1:...}', ${2}() => {",
			"  ${3}",
			"});",
		]
	},
	"test": {
		"scope": "javascript,javascriptreact",
		"prefix": "test",
		"body": [
			"test('${1:...}', ${2}() => {",
			"  ${3}",
			"});",
		]
	},
	"deps": {
		"scope": "javascript,javascriptreact",
		"prefix": "deps",
		"body": "@param {Object} deps Dependency injection, used for unit testing.",
	},
	"from": {
		"scope": "javascript,javascriptreact",
		"prefix": "from",
		"body": "import ${2:_} from '$1';",
	},
	"___": {
		"scope": "javascript,javascriptreact",
		"prefix": "___",
		"body": "import _ from 'lodash';",
	},
	"imp": {
		"scope": "javascript,javascriptreact",
		"prefix": "imp",
		"body": "import $1 from '${2:$1}';",
	},
	"jsdom": {
		"scope": "javascript,javascriptreact",
		"prefix": "jsdom",
		"body": "/** @jest-environment jsdom */",
	},
	"throw": {
		"scope": "javascript,javascriptreact",
		"prefix": "throw",
		"body": "throw new Error($1);",
	}
}
